{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"navigation\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getDefaultSidebarWidth, getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useLocale, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Drawer } from 'react-native-drawer-layout';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport useLatestCallback from 'use-latest-callback';\nimport { addCancelListener } from \"../utils/addCancelListener\";\nimport { DrawerPositionContext } from \"../utils/DrawerPositionContext\";\nimport { DrawerStatusContext } from \"../utils/DrawerStatusContext\";\nimport { getDrawerStatusFromState } from \"../utils/getDrawerStatusFromState\";\nimport { DrawerContent } from \"./DrawerContent\";\nimport { DrawerToggleButton } from \"./DrawerToggleButton\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\nfunction DrawerViewBase(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    defaultStatus = _ref.defaultStatus,\n    _ref$drawerContent = _ref.drawerContent,\n    drawerContent = _ref$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref$drawerContent,\n    _ref$detachInactiveSc = _ref.detachInactiveScreens,\n    detachInactiveScreens = _ref$detachInactiveSc === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref$detachInactiveSc;\n  var _useLocale = useLocale(),\n    direction = _useLocale.direction;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR2 === void 0 ? direction === 'rtl' ? 'right' : 'left' : _descriptors$focusedR2,\n    drawerStatusBarAnimation = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    drawerType = _descriptors$focusedR.drawerType,\n    gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n    keyboardDismissMode = _descriptors$focusedR.keyboardDismissMode,\n    _descriptors$focusedR3 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR3 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR3,\n    swipeEdgeWidth = _descriptors$focusedR.swipeEdgeWidth,\n    _descriptors$focusedR4 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR4 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR4,\n    swipeMinDistance = _descriptors$focusedR.swipeMinDistance,\n    overlayAccessibilityLabel = _descriptors$focusedR.overlayAccessibilityLabel;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var dimensions = useSafeAreaFrame();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = useLatestCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  });\n  var handleDrawerClose = useLatestCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  });\n  var handleGestureStart = useLatestCallback(function () {\n    navigation.emit({\n      type: 'gestureStart',\n      target: state.key\n    });\n  });\n  var handleGestureEnd = useLatestCallback(function () {\n    navigation.emit({\n      type: 'gestureEnd',\n      target: state.key\n    });\n  });\n  var handleGestureCancel = useLatestCallback(function () {\n    navigation.emit({\n      type: 'gestureCancel',\n      target: state.key\n    });\n  });\n  var handleTransitionStart = useLatestCallback(function (closing) {\n    navigation.emit({\n      type: 'transitionStart',\n      data: {\n        closing: closing\n      },\n      target: state.key\n    });\n  });\n  var handleTransitionEnd = useLatestCallback(function (closing) {\n    navigation.emit({\n      type: 'transitionEnd',\n      data: {\n        closing: closing\n      },\n      target: state.key\n    });\n  });\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    return addCancelListener(handleHardwareBack);\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$l = _descriptor$options.lazy,\n        lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n        unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options2 = descriptor.options,\n        freezeOnBlur = _descriptor$options2.freezeOnBlur,\n        _descriptor$options2$ = _descriptor$options2.header,\n        header = _descriptor$options2$ === void 0 ? function (_ref2) {\n          var _options$headerLeft;\n          var layout = _ref2.layout,\n            options = _ref2.options;\n          return React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: (_options$headerLeft = options.headerLeft) != null ? _options$headerLeft : function (props) {\n              return React.createElement(DrawerToggleButton, props);\n            }\n          }));\n        } : _descriptor$options2$,\n        headerShown = _descriptor$options2.headerShown,\n        headerStatusBarHeight = _descriptor$options2.headerStatusBarHeight,\n        headerTransparent = _descriptor$options2.headerTransparent,\n        sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    onGestureStart: handleGestureStart,\n    onGestureEnd: handleGestureEnd,\n    onGestureCancel: handleGestureCancel,\n    onTransitionStart: handleTransitionStart,\n    onTransitionEnd: handleTransitionEnd,\n    layout: dimensions,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeMinDistance: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    overlayAccessibilityLabel: overlayAccessibilityLabel,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      backgroundColor: colors.card,\n      width: getDefaultSidebarWidth(dimensions)\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent\n  }, renderSceneContent()));\n}\nexport function DrawerView(_ref3) {\n  var navigation = _ref3.navigation,\n    rest = _objectWithoutProperties(_ref3, _excluded);\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest)));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["getDefaultSidebarWidth","getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useLocale","useTheme","React","Platform","StyleSheet","Drawer","useSafeAreaFrame","useLatestCallback","addCancelListener","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","MaybeScreen","MaybeScreenContainer","DrawerViewBase","_ref","state","navigation","descriptors","defaultStatus","_ref$drawerContent","drawerContent","props","createElement","_ref$detachInactiveSc","detachInactiveScreens","OS","_useLocale","direction","focusedRouteKey","routes","index","key","_descriptors$focusedR","options","drawerHideStatusBarOnOpen","_descriptors$focusedR2","drawerPosition","drawerStatusBarAnimation","drawerStyle","drawerType","gestureHandlerProps","keyboardDismissMode","_descriptors$focusedR3","overlayColor","swipeEdgeWidth","_descriptors$focusedR4","swipeEnabled","swipeMinDistance","overlayAccessibilityLabel","_React$useState","useState","_React$useState2","_slicedToArray","loaded","setLoaded","includes","concat","_toConsumableArray","dimensions","_useTheme","colors","drawerStatus","handleDrawerOpen","dispatch","_objectSpread","openDrawer","target","handleDrawerClose","closeDrawer","handleGestureStart","emit","type","handleGestureEnd","handleGestureCancel","handleTransitionStart","closing","data","handleTransitionEnd","useEffect","handleHardwareBack","isFocused","renderDrawerContent","Provider","value","renderSceneContent","enabled","hasTwoStates","style","styles","content","map","route","descriptor","_descriptor$options","_descriptor$options$l","lazy","unmountOnBlur","_descriptor$options2","freezeOnBlur","_descriptor$options2$","header","_ref2","_options$headerLeft","layout","_extends","title","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","absoluteFill","zIndex","visible","focused","render","open","onOpen","onClose","onGestureStart","onGestureEnd","onGestureCancel","onTransitionStart","onTransitionEnd","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","width","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","_ref3","rest","_objectWithoutProperties","_excluded","create","flex"],"sources":["/home/shounak/Desktop/Letsgo/new/web3-cross-platform-lens/node_modules/@react-navigation/drawer/src/views/DrawerView.tsx"],"sourcesContent":["import {\n  getDefaultSidebarWidth,\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  type DrawerNavigationState,\n  type DrawerStatus,\n  type ParamListBase,\n  useLocale,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n} from '../types';\nimport { addCancelListener } from '../utils/addCancelListener';\nimport { DrawerPositionContext } from '../utils/DrawerPositionContext';\nimport { DrawerStatusContext } from '../utils/DrawerStatusContext';\nimport { getDrawerStatusFromState } from '../utils/getDrawerStatusFromState';\nimport { DrawerContent } from './DrawerContent';\nimport { DrawerToggleButton } from './DrawerToggleButton';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n}: Props) {\n  const { direction } = useLocale();\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen,\n    drawerPosition = direction === 'rtl' ? 'right' : 'left',\n    drawerStatusBarAnimation,\n    drawerStyle,\n    drawerType,\n    gestureHandlerProps,\n    keyboardDismissMode,\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance,\n    overlayAccessibilityLabel,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = useLatestCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  });\n\n  const handleDrawerClose = useLatestCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  });\n\n  const handleGestureStart = useLatestCallback(() => {\n    navigation.emit({\n      type: 'gestureStart',\n      target: state.key,\n    });\n  });\n\n  const handleGestureEnd = useLatestCallback(() => {\n    navigation.emit({\n      type: 'gestureEnd',\n      target: state.key,\n    });\n  });\n\n  const handleGestureCancel = useLatestCallback(() => {\n    navigation.emit({\n      type: 'gestureCancel',\n      target: state.key,\n    });\n  });\n\n  const handleTransitionStart = useLatestCallback((closing: boolean) => {\n    navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: state.key,\n    });\n  });\n\n  const handleTransitionEnd = useLatestCallback((closing: boolean) => {\n    navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: state.key,\n    });\n  });\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    return addCancelListener(handleHardwareBack);\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            freezeOnBlur,\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            headerShown,\n            headerStatusBarHeight,\n            headerTransparent,\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n              freezeOnBlur={freezeOnBlur}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={headerShown}\n                headerStatusBarHeight={headerStatusBarHeight}\n                headerTransparent={headerTransparent}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        onGestureStart={handleGestureStart}\n        onGestureEnd={handleGestureEnd}\n        onGestureCancel={handleGestureCancel}\n        onTransitionStart={handleTransitionStart}\n        onTransitionEnd={handleTransitionEnd}\n        layout={dimensions}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeMinDistance={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        overlayAccessibilityLabel={overlayAccessibilityLabel}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            backgroundColor: colors.card,\n            width: getDefaultSidebarWidth(dimensions),\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n      >\n        {renderSceneContent()}\n      </Drawer>\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <DrawerViewBase navigation={navigation} {...rest} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}