import { connect, disconnect, fetchBalance, fetchEnsAvatar, fetchEnsName, getAccount, getNetwork, switchNetwork, watchAccount, watchNetwork } from '@wagmi/core';
import { mainnet } from '@wagmi/core/chains';
import { Web3ModalScaffold } from '@web3modal/scaffold-react-native';
import { ADD_CHAIN_METHOD, NAMESPACE, VERSION, WALLET_CONNECT_CONNECTOR_ID } from './utils/constants';
import { caipNetworkIdToNumber, getCaipDefaultChain, getCaipTokens } from './utils/helpers';
import { NetworkImageIds } from './utils/presets';

// -- Types ---------------------------------------------------------------------

// @ts-expect-error: Overriden state type is correct

// -- Client --------------------------------------------------------------------
export class Web3Modal extends Web3ModalScaffold {
  hasSyncedConnectedAccount = false;
  options = undefined;
  constructor(options) {
    const {
      wagmiConfig,
      chains,
      defaultChain,
      tokens,
      _sdkVersion,
      ...w3mOptions
    } = options;
    if (!wagmiConfig) {
      throw new Error('web3modal:constructor - wagmiConfig is undefined');
    }
    if (!w3mOptions.projectId) {
      throw new Error('web3modal:constructor - projectId is undefined');
    }
    if (!wagmiConfig.connectors.find(c => c.id === WALLET_CONNECT_CONNECTOR_ID)) {
      throw new Error('web3modal:constructor - WalletConnectConnector is required');
    }
    const networkControllerClient = {
      switchCaipNetwork: async caipNetwork => {
        const chainId = caipNetworkIdToNumber(caipNetwork?.id);
        if (chainId) {
          await switchNetwork({
            chainId
          });
        }
      },
      async getApprovedCaipNetworksData() {
        const walletChoice = WALLET_CONNECT_CONNECTOR_ID;
        if (walletChoice?.includes(WALLET_CONNECT_CONNECTOR_ID)) {
          const connector = wagmiConfig.connectors.find(c => c.id === WALLET_CONNECT_CONNECTOR_ID);
          if (!connector) {
            throw new Error('networkControllerClient:getApprovedCaipNetworks - connector is undefined');
          }
          const provider = await connector.getProvider();
          const ns = provider.signer?.session?.namespaces;
          const nsMethods = ns?.[NAMESPACE]?.methods;
          const nsChains = ns?.[NAMESPACE]?.chains;
          return {
            supportsAllNetworks: nsMethods?.includes(ADD_CHAIN_METHOD),
            approvedCaipNetworkIds: nsChains
          };
        }
        return {
          approvedCaipNetworkIds: undefined,
          supportsAllNetworks: true
        };
      }
    };
    const connectionControllerClient = {
      connectWalletConnect: async onUri => {
        const connector = wagmiConfig.connectors.find(c => c.id === WALLET_CONNECT_CONNECTOR_ID);
        if (!connector) {
          throw new Error('connectionControllerClient:getWalletConnectUri - connector is undefined');
        }
        connector.on('message', event => {
          if (event.type === 'display_uri') {
            onUri(event.data);
            connector.removeAllListeners();
          }
        });
        const chainId = caipNetworkIdToNumber(this.getCaipNetwork()?.id);
        await connect({
          connector,
          chainId
        });
      },
      disconnect
    };
    super({
      networkControllerClient,
      connectionControllerClient,
      defaultChain: getCaipDefaultChain(defaultChain),
      tokens: getCaipTokens(tokens),
      _sdkVersion: _sdkVersion ?? `react-native-wagmi-${VERSION}`,
      ...w3mOptions
    });
    this.options = options;
    this.syncRequestedNetworks(chains);
    watchAccount(() => this.syncAccount());
    watchNetwork(() => this.syncNetwork());
  }

  // -- Public ------------------------------------------------------------------

  // @ts-expect-error: Overriden state type is correct
  getState() {
    const state = super.getState();
    return {
      ...state,
      selectedNetworkId: caipNetworkIdToNumber(state.selectedNetworkId)
    };
  }

  // @ts-expect-error: Overriden state type is correct
  subscribeState(callback) {
    return super.subscribeState(state => callback({
      ...state,
      selectedNetworkId: caipNetworkIdToNumber(state.selectedNetworkId)
    }));
  }

  // -- Private -----------------------------------------------------------------
  syncRequestedNetworks(chains) {
    const requestedCaipNetworks = chains?.map(chain => ({
      id: `${NAMESPACE}:${chain.id}`,
      name: chain.name,
      imageId: NetworkImageIds[chain.id],
      imageUrl: this.options?.chainImages?.[chain.id]
    }));
    this.setRequestedCaipNetworks(requestedCaipNetworks ?? []);
  }
  async syncAccount() {
    const {
      address,
      isConnected
    } = getAccount();
    const {
      chain
    } = getNetwork();
    this.resetAccount();
    if (isConnected && address && chain) {
      const caipAddress = `${NAMESPACE}:${chain.id}:${address}`;
      this.setIsConnected(isConnected);
      this.setCaipAddress(caipAddress);
      await Promise.all([this.syncProfile(address), this.syncBalance(address, chain), this.getApprovedCaipNetworksData()]);
      this.hasSyncedConnectedAccount = true;
    } else if (!isConnected && this.hasSyncedConnectedAccount) {
      this.resetWcConnection();
      this.resetNetwork();
    }
  }
  async syncNetwork() {
    const {
      address,
      isConnected
    } = getAccount();
    const {
      chain
    } = getNetwork();
    if (chain) {
      const chainId = String(chain.id);
      const caipChainId = `${NAMESPACE}:${chainId}`;
      this.setCaipNetwork({
        id: caipChainId,
        name: chain.name,
        imageId: NetworkImageIds[chain.id],
        imageUrl: this.options?.chainImages?.[chain.id]
      });
      if (isConnected && address) {
        const caipAddress = `${NAMESPACE}:${chain.id}:${address}`;
        this.setCaipAddress(caipAddress);
        if (chain.blockExplorers?.default?.url) {
          const url = `${chain.blockExplorers.default.url}/address/${address}`;
          this.setAddressExplorerUrl(url);
        } else {
          this.setAddressExplorerUrl(undefined);
        }
        if (this.hasSyncedConnectedAccount) {
          await this.syncBalance(address, chain);
        }
      }
    }
  }
  async syncProfile(address) {
    try {
      const {
        name,
        avatar
      } = await this.fetchIdentity({
        caipChainId: `${NAMESPACE}:${mainnet.id}`,
        address
      });
      this.setProfileName(name);
      this.setProfileImage(avatar);
    } catch {
      const profileName = await fetchEnsName({
        address,
        chainId: mainnet.id
      });
      if (profileName) {
        this.setProfileName(profileName);
        const profileImage = await fetchEnsAvatar({
          name: profileName,
          chainId: mainnet.id
        });
        if (profileImage) {
          this.setProfileImage(profileImage);
        }
      }
    }
  }
  async syncBalance(address, chain) {
    const balance = await fetchBalance({
      address,
      chainId: chain.id,
      token: this.options?.tokens?.[chain.id]?.address
    });
    this.setBalance(balance.formatted, balance.symbol);
  }
}
//# sourceMappingURL=client.js.map