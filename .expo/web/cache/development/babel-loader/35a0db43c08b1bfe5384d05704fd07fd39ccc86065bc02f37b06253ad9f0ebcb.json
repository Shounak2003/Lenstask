{"ast":null,"code":"import React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport HomeScreen from \"../../features/home/HomeScreen\";\nimport ProfileScreen from \"../../features/profile/ProfileScreen\";\nimport SignInScreen from \"../../features/sign-in/SignInScreen\";\nimport NotificationsScreen from \"../../features/notifications/NotificationsScreen\";\nimport MessagesScreen from \"../../features/messages/MessagesScreen\";\nimport BookmarksScreen from \"../../features/bookmarks/BookmarksScreen\";\nimport { useSession, SessionType } from \"../lens-sdk\";\nimport NavIcon from \"./NavIcon\";\nimport DrawerContent from \"./DrawerContent\";\nimport TabHeader from \"./TabHeader\";\nimport { RootDrawer, RootTab } from \"./index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar screens = [{\n  name: 'Home',\n  component: HomeScreen\n}, {\n  name: 'Notifications',\n  component: NotificationsScreen\n}, {\n  name: 'Messages',\n  component: MessagesScreen\n}, {\n  name: 'Bookmarks',\n  component: BookmarksScreen\n}, {\n  name: 'Profile',\n  component: ProfileScreen\n}];\nvar RootNavigator = function RootNavigator() {\n  var _useSession = useSession(),\n    session = _useSession.data;\n  var authenticated = (session == null ? void 0 : session.authenticated) && (session == null ? void 0 : session.type) === SessionType.WithProfile;\n  if (Platform.OS === 'web') {\n    return _jsx(RootDrawer.Navigator, {\n      drawerContent: DrawerContent,\n      screenOptions: {\n        header: function header() {\n          return null;\n        },\n        drawerType: 'permanent'\n      },\n      children: authenticated ? screens.map(function (screen) {\n        return _jsx(RootDrawer.Screen, {\n          name: screen.name,\n          component: screen.component,\n          options: {\n            drawerIcon: function drawerIcon(_ref) {\n              var focused = _ref.focused;\n              return _jsx(NavIcon, {\n                screenName: screen.name,\n                focused: focused\n              });\n            }\n          }\n        }, screen.name);\n      }) : _jsx(RootDrawer.Screen, {\n        name: \"SignIn\",\n        component: SignInScreen,\n        options: {\n          title: 'Sign In',\n          drawerIcon: function drawerIcon(_ref2) {\n            var focused = _ref2.focused;\n            return _jsx(NavIcon, {\n              screenName: \"SignIn\",\n              focused: focused\n            });\n          }\n        }\n      })\n    });\n  }\n  return _jsx(RootTab.Navigator, {\n    screenOptions: {\n      header: function header() {\n        return _jsx(TabHeader, {});\n      }\n    },\n    children: authenticated ? screens.map(function (screen) {\n      return _jsx(RootTab.Screen, {\n        name: screen.name,\n        component: screen.component,\n        options: {\n          tabBarLabel: function tabBarLabel() {\n            return null;\n          },\n          tabBarIcon: function tabBarIcon(_ref3) {\n            var focused = _ref3.focused;\n            return _jsx(NavIcon, {\n              screenName: screen.name,\n              focused: focused\n            });\n          }\n        }\n      }, screen.name);\n    }) : _jsx(RootTab.Screen, {\n      name: \"SignIn\",\n      component: SignInScreen,\n      options: {\n        title: 'Sign In',\n        tabBarIcon: function tabBarIcon(_ref4) {\n          var focused = _ref4.focused;\n          return _jsx(NavIcon, {\n            screenName: \"SignIn\",\n            focused: focused\n          });\n        }\n      }\n    })\n  });\n};\nexport default RootNavigator;","map":{"version":3,"names":["React","Platform","HomeScreen","ProfileScreen","SignInScreen","NotificationsScreen","MessagesScreen","BookmarksScreen","useSession","SessionType","NavIcon","DrawerContent","TabHeader","RootDrawer","RootTab","jsx","_jsx","screens","name","component","RootNavigator","_useSession","session","data","authenticated","type","WithProfile","OS","Navigator","drawerContent","screenOptions","header","drawerType","children","map","screen","Screen","options","drawerIcon","_ref","focused","screenName","title","_ref2","tabBarLabel","tabBarIcon","_ref3","_ref4"],"sources":["/home/shounak/Desktop/Letsgo/new/web3-cross-platform-lens/src/lib/navigation/RootNavigator.tsx"],"sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\nimport HomeScreen from '../../features/home/HomeScreen';\nimport ProfileScreen from '../../features/profile/ProfileScreen';\nimport SignInScreen from '../../features/sign-in/SignInScreen';\nimport NotificationsScreen from '../../features/notifications/NotificationsScreen';\nimport MessagesScreen from '../../features/messages/MessagesScreen';\nimport BookmarksScreen from '../../features/bookmarks/BookmarksScreen';\nimport { useSession, SessionType } from '../lens-sdk';\nimport NavIcon from './NavIcon';\nimport DrawerContent from './DrawerContent';\nimport TabHeader from './TabHeader';\nimport { RootDrawer, RootTab } from './index';\n\nconst screens = [\n  {\n    name: 'Home',\n    component: HomeScreen,\n  },\n  {\n    name: 'Notifications',\n    component: NotificationsScreen,\n  },\n  {\n    name: 'Messages',\n    component: MessagesScreen,\n  },\n  {\n    name: 'Bookmarks',\n    component: BookmarksScreen,\n  },\n  {\n    name: 'Profile',\n    component: ProfileScreen,\n  },\n] as const;\n\nconst RootNavigator = () => {\n  const { data: session } = useSession(); // Get the session\n\n  // Check if user is authenticated\n  const authenticated =\n    session?.authenticated && session?.type === SessionType.WithProfile;\n\n  if (Platform.OS === 'web') {\n    return (\n      <RootDrawer.Navigator\n        drawerContent={DrawerContent}\n        screenOptions={{\n          header: () => null,\n          drawerType: 'permanent',\n        }}>\n        {/* If authenticated, render all the routes normally, otherwise, render only the SignIn route */}\n        {authenticated ? (\n          screens.map(screen => (\n            <RootDrawer.Screen\n              key={screen.name}\n              name={screen.name}\n              component={screen.component}\n              options={{\n                drawerIcon: ({ focused }) => (\n                  <NavIcon screenName={screen.name} focused={focused} />\n                ),\n              }}\n            />\n          ))\n        ) : (\n          <RootDrawer.Screen\n            name=\"SignIn\"\n            component={SignInScreen}\n            options={{\n              title: 'Sign In',\n              drawerIcon: ({ focused }) => (\n                <NavIcon screenName=\"SignIn\" focused={focused} />\n              ),\n            }}\n          />\n        )}\n      </RootDrawer.Navigator>\n    );\n  }\n\n  return (\n    <RootTab.Navigator\n      screenOptions={{\n        header: () => <TabHeader />,\n      }}>\n      {/* If authenticated, render all the routes normally, otherwise, render only the SignIn route */}\n      {authenticated ? (\n        screens.map(screen => (\n          <RootTab.Screen\n            key={screen.name}\n            name={screen.name}\n            component={screen.component}\n            options={{\n              tabBarLabel: () => null,\n              tabBarIcon: ({ focused }) => (\n                <NavIcon screenName={screen.name} focused={focused} />\n              ),\n            }}\n          />\n        ))\n      ) : (\n        <RootTab.Screen\n          name=\"SignIn\"\n          component={SignInScreen}\n          options={{\n            title: 'Sign In',\n            tabBarIcon: ({ focused }) => (\n              <NavIcon screenName=\"SignIn\" focused={focused} />\n            ),\n          }}\n        />\n      )}\n    </RootTab.Navigator>\n  );\n};\n\nexport default RootNavigator;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}