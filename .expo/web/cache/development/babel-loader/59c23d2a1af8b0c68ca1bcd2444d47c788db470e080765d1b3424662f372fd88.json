{"ast":null,"code":"import { Group } from \"./Group\";\nimport { Screen } from \"./Screen\";\nexport function createNavigatorFactory(Navigator) {\n  function createNavigator(config) {\n    if (config != null) {\n      return {\n        Navigator: Navigator,\n        Screen: Screen,\n        Group: Group,\n        config: config\n      };\n    }\n    return {\n      Navigator: Navigator,\n      Screen: Screen,\n      Group: Group\n    };\n  }\n  return createNavigator;\n}","map":{"version":3,"names":["Group","Screen","createNavigatorFactory","Navigator","createNavigator","config"],"sources":["/home/shounak/Desktop/Letsgo/new/web3-cross-platform-lens/node_modules/@react-navigation/core/src/createNavigatorFactory.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport type * as React from 'react';\n\nimport { Group } from './Group';\nimport { Screen } from './Screen';\nimport type { StaticConfig } from './StaticNavigation';\nimport type { EventMapBase, TypedNavigator } from './types';\n\n/**\n * Higher order component to create a `Navigator` and `Screen` pair.\n * Custom navigators should wrap the navigator component in `createNavigator` before exporting.\n *\n * @param Navigator The navigator component to wrap.\n * @returns Factory method to create a `Navigator` and `Screen` pair.\n */\nexport function createNavigatorFactory<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n  NavigatorComponent extends React.ComponentType<any>,\n>(Navigator: NavigatorComponent) {\n  function createNavigator<ParamList extends ParamListBase>(): TypedNavigator<\n    ParamList,\n    State,\n    ScreenOptions,\n    EventMap,\n    typeof Navigator\n  >;\n\n  function createNavigator<\n    ParamList extends ParamListBase,\n    Config extends StaticConfig<\n      ParamList,\n      State,\n      ScreenOptions,\n      EventMap,\n      typeof Navigator\n    >,\n  >(\n    config: Config\n  ): TypedNavigator<\n    ParamList,\n    State,\n    ScreenOptions,\n    EventMap,\n    typeof Navigator\n  > & { config: Config };\n\n  function createNavigator(config?: any): any {\n    if (config != null) {\n      return {\n        Navigator,\n        Screen,\n        Group,\n        config,\n      };\n    }\n\n    return {\n      Navigator,\n      Screen,\n      Group,\n    };\n  }\n\n  return createNavigator;\n}\n"],"mappings":"AAGA,SAASA,KAAK;AACd,SAASC,MAAM;AAWf,OAAO,SAASC,sBAAsBA,CAKpCC,SAA6B,EAAE;EA4B/B,SAASC,eAAeA,CAACC,MAAY,EAAO;IAC1C,IAAIA,MAAM,IAAI,IAAI,EAAE;MAClB,OAAO;QACLF,SAAS,EAATA,SAAS;QACTF,MAAM,EAANA,MAAM;QACND,KAAK,EAALA,KAAK;QACLK,MAAA,EAAAA;MACF,CAAC;IACH;IAEA,OAAO;MACLF,SAAS,EAATA,SAAS;MACTF,MAAM,EAANA,MAAM;MACND,KAAA,EAAAA;IACF,CAAC;EACH;EAEA,OAAOI,eAAe;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}