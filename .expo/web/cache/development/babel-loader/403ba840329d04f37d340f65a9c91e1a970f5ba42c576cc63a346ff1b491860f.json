{"ast":null,"code":"import { getStateFromPath, NavigationContext } from '@react-navigation/core';\nimport React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport { LinkingContext } from \"./LinkingContext\";\nimport { UnhandledLinkingContext } from \"./UnhandledLinkingContext\";\nfunction extractNavigatorSpecificState(_, pathState, depth) {\n  var partialPathState = pathState;\n  var currentDepth = depth;\n  while (currentDepth) {\n    if (!partialPathState) {\n      return undefined;\n    }\n    partialPathState = partialPathState.routes[partialPathState.routes.length - 1].state;\n    currentDepth--;\n  }\n  return partialPathState;\n}\nexport function useUnhandledLinking() {\n  var navigation = React.useContext(NavigationContext);\n  var linking = React.useContext(LinkingContext);\n  var _React$useContext = React.useContext(UnhandledLinkingContext),\n    setLastUnhandledLink = _React$useContext.setLastUnhandledLink,\n    lastUnhandledLink = _React$useContext.lastUnhandledLink;\n  var options = linking.options;\n  var getStateForRouteNamesChange = function getStateForRouteNamesChange(currentState) {\n    var _options$getStateFrom;\n    if (lastUnhandledLink == null) {\n      return;\n    }\n    var path = lastUnhandledLink;\n    if (!lastUnhandledLink) {\n      return;\n    }\n    var getStateFromPathHelper = (_options$getStateFrom = options == null ? void 0 : options.getStateFromPath) != null ? _options$getStateFrom : getStateFromPath;\n    var pathState = getStateFromPathHelper(path, options == null ? void 0 : options.config);\n    if (!pathState) {\n      return;\n    }\n    var depth = 0;\n    var parent = navigation;\n    while (parent) {\n      depth++;\n      parent = parent.getParent();\n    }\n    var state = extractNavigatorSpecificState(currentState, pathState, depth);\n    if (!state) {\n      return;\n    }\n    return state;\n  };\n  var clearUnhandledLink = useLatestCallback(function () {\n    setLastUnhandledLink(undefined);\n  });\n  return {\n    lastUnhandledLink: lastUnhandledLink,\n    getStateForRouteNamesChange: getStateForRouteNamesChange,\n    clearUnhandledLink: clearUnhandledLink\n  };\n}","map":{"version":3,"names":["getStateFromPath","NavigationContext","React","useLatestCallback","LinkingContext","UnhandledLinkingContext","extractNavigatorSpecificState","_","pathState","depth","partialPathState","currentDepth","undefined","routes","length","state","useUnhandledLinking","navigation","useContext","linking","_React$useContext","setLastUnhandledLink","lastUnhandledLink","options","getStateForRouteNamesChange","currentState","_options$getStateFrom","path","getStateFromPathHelper","config","parent","getParent","clearUnhandledLink"],"sources":["/home/shounak/Desktop/Letsgo/new/web3-cross-platform-lens/node_modules/@react-navigation/native/src/useUnhandledLinking.tsx"],"sourcesContent":["import {\n  getStateFromPath,\n  NavigationContext,\n  type NavigationState,\n  type PartialState,\n} from '@react-navigation/core';\nimport React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { LinkingContext } from './LinkingContext';\nimport { UnhandledLinkingContext } from './UnhandledLinkingContext';\n\nfunction extractNavigatorSpecificState(\n  _: NavigationState,\n  pathState: PartialState<NavigationState>,\n  depth: number\n) {\n  let partialPathState: PartialState<NavigationState> | undefined = pathState;\n\n  let currentDepth = depth;\n  while (currentDepth) {\n    if (!partialPathState) {\n      return undefined;\n    }\n    partialPathState =\n      partialPathState.routes[partialPathState.routes.length - 1].state;\n    currentDepth--;\n  }\n  return partialPathState;\n}\n\nexport function useUnhandledLinking() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n  const { setLastUnhandledLink, lastUnhandledLink } = React.useContext(\n    UnhandledLinkingContext\n  );\n\n  const { options } = linking;\n\n  const getStateForRouteNamesChange = (\n    currentState: NavigationState\n  ): PartialState<NavigationState> | undefined => {\n    if (lastUnhandledLink == null) {\n      // noop, nothing to handle\n      return;\n    }\n\n    // at web, the path is already extracted\n    const path = lastUnhandledLink;\n    if (!lastUnhandledLink) {\n      return;\n    }\n\n    // First, we parse the URL to get the desired state\n    const getStateFromPathHelper =\n      options?.getStateFromPath ?? getStateFromPath;\n\n    const pathState = getStateFromPathHelper(path, options?.config);\n\n    if (!pathState) {\n      return;\n    }\n\n    let depth = 0;\n    let parent = navigation;\n    while (parent) {\n      depth++;\n      parent = parent.getParent();\n    }\n\n    const state = extractNavigatorSpecificState(currentState, pathState, depth);\n\n    if (!state) {\n      return;\n    }\n\n    return state;\n  };\n\n  const clearUnhandledLink = useLatestCallback(() => {\n    setLastUnhandledLink(undefined);\n  });\n\n  return {\n    lastUnhandledLink,\n    getStateForRouteNamesChange,\n    clearUnhandledLink,\n  };\n}\n"],"mappings":"AAAA,SACEA,gBAAgB,EAChBC,iBAAiB,QAGZ,wBAAwB;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,iBAAiB,MAAM,qBAAqB;AAEnD,SAASC,cAAc;AACvB,SAASC,uBAAuB;AAEhC,SAASC,6BAA6BA,CACpCC,CAAkB,EAClBC,SAAwC,EACxCC,KAAa,EACb;EACA,IAAIC,gBAA2D,GAAGF,SAAS;EAE3E,IAAIG,YAAY,GAAGF,KAAK;EACxB,OAAOE,YAAY,EAAE;IACnB,IAAI,CAACD,gBAAgB,EAAE;MACrB,OAAOE,SAAS;IAClB;IACAF,gBAAgB,GACdA,gBAAgB,CAACG,MAAM,CAACH,gBAAgB,CAACG,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAACC,KAAK;IACnEJ,YAAY,EAAE;EAChB;EACA,OAAOD,gBAAgB;AACzB;AAEA,OAAO,SAASM,mBAAmBA,CAAA,EAAG;EACpC,IAAMC,UAAU,GAAGf,KAAK,CAACgB,UAAU,CAACjB,iBAAiB,CAAC;EACtD,IAAMkB,OAAO,GAAGjB,KAAK,CAACgB,UAAU,CAACd,cAAc,CAAC;EAChD,IAAAgB,iBAAA,GAAoDlB,KAAK,CAACgB,UAAU,CAClEb,uBACF,CAAC;IAFOgB,oBAAoB,GAAAD,iBAAA,CAApBC,oBAAoB;IAAEC,iBAAA,GAAAF,iBAAA,CAAAE,iBAAA;EAI9B,IAAQC,OAAA,GAAYJ,OAAO,CAAnBI,OAAA;EAER,IAAMC,2BAA2B,GAC/B,SADIA,2BAA2BA,CAC/BC,YAA6B,EACiB;IAAA,IAAAC,qBAAA;IAC9C,IAAIJ,iBAAiB,IAAI,IAAI,EAAE;MAE7B;IACF;IAGA,IAAMK,IAAI,GAAGL,iBAAiB;IAC9B,IAAI,CAACA,iBAAiB,EAAE;MACtB;IACF;IAGA,IAAMM,sBAAsB,IAAAF,qBAAA,GAC1BH,OAAO,oBAAPA,OAAO,CAAEvB,gBAAgB,YAAA0B,qBAAA,GAAI1B,gBAAgB;IAE/C,IAAMQ,SAAS,GAAGoB,sBAAsB,CAACD,IAAI,EAAEJ,OAAO,oBAAPA,OAAO,CAAEM,MAAM,CAAC;IAE/D,IAAI,CAACrB,SAAS,EAAE;MACd;IACF;IAEA,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIqB,MAAM,GAAGb,UAAU;IACvB,OAAOa,MAAM,EAAE;MACbrB,KAAK,EAAE;MACPqB,MAAM,GAAGA,MAAM,CAACC,SAAS,CAAC,CAAC;IAC7B;IAEA,IAAMhB,KAAK,GAAGT,6BAA6B,CAACmB,YAAY,EAAEjB,SAAS,EAAEC,KAAK,CAAC;IAE3E,IAAI,CAACM,KAAK,EAAE;MACV;IACF;IAEA,OAAOA,KAAK;EACd,CAAC;EAED,IAAMiB,kBAAkB,GAAG7B,iBAAiB,CAAC,YAAM;IACjDkB,oBAAoB,CAACT,SAAS,CAAC;EACjC,CAAC,CAAC;EAEF,OAAO;IACLU,iBAAiB,EAAjBA,iBAAiB;IACjBE,2BAA2B,EAA3BA,2BAA2B;IAC3BQ,kBAAA,EAAAA;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}