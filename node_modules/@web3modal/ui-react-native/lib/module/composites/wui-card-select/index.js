import { Animated, Pressable } from 'react-native';
import { Text } from '../../components/wui-text';
import useAnimatedValue from '../../hooks/useAnimatedValue';
import { useTheme } from '../../hooks/useTheme';
import { NetworkImage } from '../wui-network-image';
import { WalletImage } from '../wui-wallet-image';
import styles, { getBackgroundColor, ITEM_HEIGHT, ITEM_WIDTH } from './styles';
import { memo } from 'react';
import { UiUtil } from '../../utils/UiUtil';
const AnimatedPressable = Animated.createAnimatedComponent(Pressable);
export const CardSelectHeight = ITEM_HEIGHT;
export const CardSelectWidth = ITEM_WIDTH;
function _CardSelect(_ref) {
  let {
    name,
    type = 'wallet',
    imageSrc,
    imageHeaders,
    onPress,
    selected,
    disabled,
    style
  } = _ref;
  const Theme = useTheme();
  const normalbackgroundColor = getBackgroundColor({
    selected,
    disabled,
    pressed: false
  });
  const pressedBackgroundColor = getBackgroundColor({
    selected,
    disabled,
    pressed: true
  });
  const {
    animatedValue,
    setStartValue,
    setEndValue
  } = useAnimatedValue(Theme[normalbackgroundColor], Theme[pressedBackgroundColor]);
  const textColor = disabled ? 'fg-300' : selected ? 'accent-100' : 'fg-100';
  const Image = type === 'wallet' ? WalletImage : NetworkImage;
  return /*#__PURE__*/React.createElement(AnimatedPressable, {
    onPress: onPress,
    onPressIn: setEndValue,
    onPressOut: setStartValue,
    disabled: disabled,
    style: [styles.container, {
      backgroundColor: animatedValue
    }, style]
  }, /*#__PURE__*/React.createElement(Image, {
    imageSrc: imageSrc,
    imageHeaders: imageHeaders,
    size: "md",
    style: disabled && styles.disabledImage,
    selected: selected,
    disabled: disabled
  }), /*#__PURE__*/React.createElement(Text, {
    variant: "tiny-500",
    color: textColor,
    style: styles.text,
    numberOfLines: 1
  }, UiUtil.getWalletName(name)));
}
export const CardSelect = /*#__PURE__*/memo(_CardSelect, (prevProps, nextProps) => {
  return prevProps.name === nextProps.name;
});
//# sourceMappingURL=index.js.map