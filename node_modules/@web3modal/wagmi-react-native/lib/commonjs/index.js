"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "W3mAccountButton", {
  enumerable: true,
  get: function () {
    return _scaffoldReactNative.W3mAccountButton;
  }
});
Object.defineProperty(exports, "W3mButton", {
  enumerable: true,
  get: function () {
    return _scaffoldReactNative.W3mButton;
  }
});
Object.defineProperty(exports, "W3mConnectButton", {
  enumerable: true,
  get: function () {
    return _scaffoldReactNative.W3mConnectButton;
  }
});
Object.defineProperty(exports, "Web3Modal", {
  enumerable: true,
  get: function () {
    return _scaffoldReactNative.Web3Modal;
  }
});
exports.createWeb3Modal = createWeb3Modal;
Object.defineProperty(exports, "defaultWagmiConfig", {
  enumerable: true,
  get: function () {
    return _defaultWagmiConfig.defaultWagmiConfig;
  }
});
exports.useWeb3Modal = useWeb3Modal;
exports.useWeb3ModalState = useWeb3ModalState;
require("@walletconnect/react-native-compat");
var _scaffoldReactNative = require("@web3modal/scaffold-react-native");
var _defaultWagmiConfig = require("./utils/defaultWagmiConfig");
var _react = require("react");
var _client = require("./client");
var _constants = require("./utils/constants");
// -- Types -------------------------------------------------------------------

// -- Setup -------------------------------------------------------------------
let modal;
function createWeb3Modal(options) {
  if (!modal) {
    modal = new _client.Web3Modal({
      ...options,
      _sdkVersion: `react-native-wagmi-${_constants.VERSION}`
    });
  }
  return modal;
}

// -- Hooks -------------------------------------------------------------------
function useWeb3Modal() {
  if (!modal) {
    throw new Error('Please call "createWeb3Modal" before using "useWeb3Modal" hook');
  }
  async function open(options) {
    await modal?.open(options);
  }
  async function close() {
    await modal?.close();
  }
  return {
    open,
    close
  };
}
function useWeb3ModalState() {
  if (!modal) {
    throw new Error('Please call "createWeb3Modal" before using "useWeb3ModalState" hook');
  }
  const [state, setState] = (0, _react.useState)(modal.getState());
  (0, _react.useEffect)(() => {
    const unsubscribe = modal?.subscribeState(newState => {
      if (newState) setState({
        ...newState
      });
    });
    return () => {
      unsubscribe?.();
    };
  }, []);
  return state;
}
//# sourceMappingURL=index.js.map