"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FetchUtil = void 0;
// -- Types ----------------------------------------------------------------------

// -- Utility --------------------------------------------------------------------
class FetchUtil {
  constructor(_ref) {
    let {
      baseUrl
    } = _ref;
    this.baseUrl = baseUrl;
  }
  async get(_ref2) {
    let {
      headers,
      ...args
    } = _ref2;
    const url = this.createUrl(args).toString();
    const response = await fetch(url, {
      method: 'GET',
      headers
    });
    return response.json();
  }
  async getBlob(_ref3) {
    let {
      headers,
      ...args
    } = _ref3;
    const url = this.createUrl(args).toString();
    const response = await fetch(url, {
      method: 'GET',
      headers
    });
    return response.blob();
  }
  async post(_ref4) {
    let {
      body,
      headers,
      ...args
    } = _ref4;
    const url = this.createUrl(args).toString();
    const response = await fetch(url, {
      method: 'POST',
      headers,
      body: body ? JSON.stringify(body) : undefined
    });
    return response.json();
  }
  async put(_ref5) {
    let {
      body,
      headers,
      ...args
    } = _ref5;
    const url = this.createUrl(args).toString();
    const response = await fetch(url, {
      method: 'PUT',
      headers,
      body: body ? JSON.stringify(body) : undefined
    });
    return response.json();
  }
  async delete(_ref6) {
    let {
      body,
      headers,
      ...args
    } = _ref6;
    const url = this.createUrl(args).toString();
    const response = await fetch(url, {
      method: 'DELETE',
      headers,
      body: body ? JSON.stringify(body) : undefined
    });
    return response.json();
  }
  createUrl(_ref7) {
    let {
      path,
      params
    } = _ref7;
    const url = new URL(path, this.baseUrl);
    if (params) {
      Object.entries(params).forEach(_ref8 => {
        let [key, value] = _ref8;
        if (value) {
          url.searchParams.append(key, value);
        }
      });
    }
    return url;
  }
}
exports.FetchUtil = FetchUtil;
//# sourceMappingURL=FetchUtil.js.map