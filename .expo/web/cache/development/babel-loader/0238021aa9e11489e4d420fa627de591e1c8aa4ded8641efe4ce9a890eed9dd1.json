{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"layout\", \"screenListeners\", \"screenOptions\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport { DrawerView } from \"../views/DrawerView\";\nfunction DrawerNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    _ref$defaultStatus = _ref.defaultStatus,\n    defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    layout = _ref.layout,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      defaultStatus: defaultStatus,\n      backBehavior: backBehavior,\n      children: children,\n      layout: layout,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport var createDrawerNavigator = createNavigatorFactory(DrawerNavigator);","map":{"version":3,"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","DrawerView","DrawerNavigator","_ref","id","initialRouteName","_ref$defaultStatus","defaultStatus","backBehavior","children","layout","screenListeners","screenOptions","rest","_objectWithoutProperties","_excluded","_useNavigationBuilder","state","descriptors","navigation","NavigationContent","createElement","_extends","createDrawerNavigator"],"sources":["/home/shounak/Desktop/Letsgo/new/web3-cross-platform-lens/node_modules/@react-navigation/drawer/src/navigators/createDrawerNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  type DefaultNavigatorOptions,\n  type DrawerActionHelpers,\n  type DrawerNavigationState,\n  DrawerRouter,\n  type DrawerRouterOptions,\n  type ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport { DrawerView } from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  id,\n  initialRouteName,\n  defaultStatus = 'closed',\n  backBehavior,\n  children,\n  layout,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: Props) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      id,\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      layout,\n      screenListeners,\n      screenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport const createDrawerNavigator = createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,SACEA,sBAAsB,EAItBC,YAAY,EAGZC,oBAAoB,QACf,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAO9B,SAASC,UAAU;AAWnB,SAASC,eAAeA,CAAAC,IAAA,EAUd;EAAA,IATRC,EAAE,GASID,IAAA,CATNC,EAAE;IACFC,gBAAgB,GAQVF,IAAA,CARNE,gBAAgB;IAAAC,kBAAA,GAQVH,IAAA,CAPNI,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,QAAQ,GAAAA,kBAAA;IACxBE,YAAY,GAMNL,IAAA,CANNK,YAAY;IACZC,QAAQ,GAKFN,IAAA,CALNM,QAAQ;IACRC,MAAM,GAIAP,IAAA,CAJNO,MAAM;IACNC,eAAe,GAGTR,IAAA,CAHNQ,eAAe;IACfC,aAAa,GAEPT,IAAA,CAFNS,aAAa;IACVC,IAAA,GAAAC,wBAAA,CACGX,IAAA,EAAAY,SAAA;EACN,IAAAC,qBAAA,GACEjB,oBAAoB,CAMlBD,YAAY,EAAE;MACdM,EAAE,EAAFA,EAAE;MACFC,gBAAgB,EAAhBA,gBAAgB;MAChBE,aAAa,EAAbA,aAAa;MACbC,YAAY,EAAZA,YAAY;MACZC,QAAQ,EAARA,QAAQ;MACRC,MAAM,EAANA,MAAM;MACNC,eAAe,EAAfA,eAAe;MACfC,aAAA,EAAAA;IACF,CAAC,CAAC;IAhBIK,KAAK,GAAAD,qBAAA,CAALC,KAAK;IAAEC,WAAW,GAAAF,qBAAA,CAAXE,WAAW;IAAEC,UAAU,GAAAH,qBAAA,CAAVG,UAAU;IAAEC,iBAAA,GAAAJ,qBAAA,CAAAI,iBAAA;EAkBxC,OACEpB,KAAA,CAAAqB,aAAA,CAACD,iBAAiB,QAChBpB,KAAA,CAAAqB,aAAA,CAACpB,UAAU,EAAAqB,QAAA,KACLT,IAAI;IACRN,aAAa,EAAEA,aAAc;IAC7BU,KAAK,EAAEA,KAAM;IACbC,WAAW,EAAEA,WAAY;IACzBC,UAAU,EAAEA;EAAW,EACxB,CACgB,CAAC;AAExB;AAEA,OAAO,IAAMI,qBAAqB,GAAG1B,sBAAsB,CAKzDK,eAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}