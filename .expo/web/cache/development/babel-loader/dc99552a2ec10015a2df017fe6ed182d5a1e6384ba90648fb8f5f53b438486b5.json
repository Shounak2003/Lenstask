{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useAccount } from 'wagmi';\nimport Text from \"../../components/Text\";\nimport { useLastLoggedInProfile, useProfilesManaged } from \"../../lib/lens-sdk\";\nimport ProfileCard from \"./ProfileCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SignInScreen() {\n  var _useAccount = useAccount(),\n    isConnected = _useAccount.isConnected,\n    address = _useAccount.address;\n  var _useProfilesManaged = useProfilesManaged({\n      for: address\n    }),\n    _useProfilesManaged$d = _useProfilesManaged.data,\n    profiles = _useProfilesManaged$d === void 0 ? [] : _useProfilesManaged$d;\n  var _useLastLoggedInProfi = useLastLoggedInProfile({\n      for: address\n    }),\n    lastLoggedInProfile = _useLastLoggedInProfi.data;\n  var sortedProfiles = _toConsumableArray(profiles).sort(function (a, b) {\n    if (a.id === (lastLoggedInProfile == null ? void 0 : lastLoggedInProfile.id)) {\n      return -1;\n    }\n    if (b.id === (lastLoggedInProfile == null ? void 0 : lastLoggedInProfile.id)) {\n      return 1;\n    }\n    return 0;\n  });\n  return _jsx(View, {\n    style: styles.container,\n    children: isConnected ? _jsxs(_Fragment, {\n      children: [_jsx(Text, {\n        children: \"Choose profile to sign in with\"\n      }), sortedProfiles.map(function (profile) {\n        return _jsx(ProfileCard, {\n          profile: profile,\n          isLastLoggedInProfile: profile.id === (lastLoggedInProfile == null ? void 0 : lastLoggedInProfile.id)\n        }, profile.id);\n      })]\n    }) : _jsx(Text, {\n      children: \"Connect wallet to sign in\"\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginHorizontal: 20,\n    gap: 20\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","useAccount","Text","useLastLoggedInProfile","useProfilesManaged","ProfileCard","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","SignInScreen","_useAccount","isConnected","address","_useProfilesManaged","for","_useProfilesManaged$d","data","profiles","_useLastLoggedInProfi","lastLoggedInProfile","sortedProfiles","_toConsumableArray","sort","a","b","id","style","styles","container","children","map","profile","isLastLoggedInProfile","create","flex","alignItems","justifyContent","marginHorizontal","gap"],"sources":["/home/shounak/Desktop/Letsgo/new/web3-cross-platform-lens/src/features/sign-in/SignInScreen.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useAccount } from 'wagmi';\nimport Text from '../../components/Text';\nimport { useLastLoggedInProfile, useProfilesManaged } from '../../lib/lens-sdk';\nimport ProfileCard from './ProfileCard';\n\nexport default function SignInScreen() {\n  // Get the connected wallet address\n  const { isConnected, address } = useAccount();\n\n  // Query the profiles managed by the connected wallet address\n  const { data: profiles = [] } = useProfilesManaged({\n    for: address,\n  });\n\n  // Query the last logged in profile for the connected wallet address\n  const { data: lastLoggedInProfile } = useLastLoggedInProfile({\n    for: address,\n  });\n\n  // Sort the profiles so that the last logged in profile is at the top\n  const sortedProfiles = [...profiles].sort((a, b) => {\n    if (a.id === lastLoggedInProfile?.id) {\n      return -1;\n    }\n    if (b.id === lastLoggedInProfile?.id) {\n      return 1;\n    }\n    return 0;\n  });\n\n  return (\n    <View style={styles.container}>\n      {isConnected ? (\n        <>\n          <Text>Choose profile to sign in with</Text>\n\n          {/* Render a profile card for each profile */}\n          {sortedProfiles.map(profile => (\n            <ProfileCard\n              key={profile.id}\n              profile={profile}\n              isLastLoggedInProfile={profile.id === lastLoggedInProfile?.id}\n            />\n          ))}\n        </>\n      ) : (\n        <Text>Connect wallet to sign in</Text>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginHorizontal: 20,\n    gap: 20,\n  },\n});\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAE1B,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,IAAI;AACX,SAASC,sBAAsB,EAAEC,kBAAkB;AACnD,OAAOC,WAAW;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAExC,eAAe,SAASC,YAAYA,CAAA,EAAG;EAErC,IAAAC,WAAA,GAAiCZ,UAAU,CAAC,CAAC;IAArCa,WAAW,GAAAD,WAAA,CAAXC,WAAW;IAAEC,OAAO,GAAAF,WAAA,CAAPE,OAAO;EAG5B,IAAAC,mBAAA,GAAgCZ,kBAAkB,CAAC;MACjDa,GAAG,EAAEF;IACP,CAAC,CAAC;IAAAG,qBAAA,GAAAF,mBAAA,CAFMG,IAAI;IAAEC,QAAQ,GAAAF,qBAAA,cAAG,EAAE,GAAAA,qBAAA;EAK3B,IAAAG,qBAAA,GAAsClB,sBAAsB,CAAC;MAC3Dc,GAAG,EAAEF;IACP,CAAC,CAAC;IAFYO,mBAAmB,GAAAD,qBAAA,CAAzBF,IAAI;EAKZ,IAAMI,cAAc,GAAGC,kBAAA,CAAIJ,QAAQ,EAAEK,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;IAClD,IAAID,CAAC,CAACE,EAAE,MAAKN,mBAAmB,oBAAnBA,mBAAmB,CAAEM,EAAE,GAAE;MACpC,OAAO,CAAC,CAAC;IACX;IACA,IAAID,CAAC,CAACC,EAAE,MAAKN,mBAAmB,oBAAnBA,mBAAmB,CAAEM,EAAE,GAAE;MACpC,OAAO,CAAC;IACV;IACA,OAAO,CAAC;EACV,CAAC,CAAC;EAEF,OACErB,IAAA,CAACP,IAAI;IAAC6B,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAC3BlB,WAAW,GACVH,KAAA,CAAAF,SAAA;MAAAuB,QAAA,GACEzB,IAAA,CAACL,IAAI;QAAA8B,QAAA,EAAC;MAA8B,CAAM,CAAC,EAG1CT,cAAc,CAACU,GAAG,CAAC,UAAAC,OAAO;QAAA,OACzB3B,IAAA,CAACF,WAAW;UAEV6B,OAAO,EAAEA,OAAQ;UACjBC,qBAAqB,EAAED,OAAO,CAACN,EAAE,MAAKN,mBAAmB,oBAAnBA,mBAAmB,CAAEM,EAAE;QAAC,GAFzDM,OAAO,CAACN,EAGd,CAAC;MAAA,CACH,CAAC;IAAA,CACF,CAAC,GAEHrB,IAAA,CAACL,IAAI;MAAA8B,QAAA,EAAC;IAAyB,CAAM;EACtC,CACG,CAAC;AAEX;AAEA,IAAMF,MAAM,GAAG/B,UAAU,CAACqC,MAAM,CAAC;EAC/BL,SAAS,EAAE;IACTM,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,gBAAgB,EAAE,EAAE;IACpBC,GAAG,EAAE;EACP;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}