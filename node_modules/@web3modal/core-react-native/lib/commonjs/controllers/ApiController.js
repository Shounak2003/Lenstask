"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiController = void 0;
var _reactNative = require("react-native");
var _utils = require("valtio/utils");
var _vanilla = require("valtio/vanilla");
var _CoreHelperUtil = require("../utils/CoreHelperUtil");
var _FetchUtil = require("../utils/FetchUtil");
var _StorageUtil = require("../utils/StorageUtil");
var _AssetController = require("./AssetController");
var _NetworkController = require("./NetworkController");
var _OptionsController = require("./OptionsController");
// -- Helpers ------------------------------------------- //
const baseUrl = _CoreHelperUtil.CoreHelperUtil.getApiUrl();
const api = new _FetchUtil.FetchUtil({
  baseUrl
});
const defaultEntries = '48';
const recommendedEntries = '4';
const sdkType = 'w3m';

// -- Types --------------------------------------------- //

// -- State --------------------------------------------- //
const state = (0, _vanilla.proxy)({
  sdkVersion: 'react-native-undefined',
  page: 1,
  count: 0,
  featured: [],
  recommended: [],
  wallets: [],
  search: [],
  installed: []
});

// -- Controller ---------------------------------------- //
const ApiController = exports.ApiController = {
  state,
  platform() {
    return _reactNative.Platform.select({
      default: 'ios',
      android: 'android'
    });
  },
  subscribeKey(key, callback) {
    return (0, _utils.subscribeKey)(state, key, callback);
  },
  setSdkVersion(sdkVersion) {
    state.sdkVersion = sdkVersion;
  },
  _getApiHeaders() {
    return {
      'x-project-id': _OptionsController.OptionsController.state.projectId,
      'x-sdk-type': sdkType,
      'x-sdk-version': state.sdkVersion,
      'User-Agent': `${_reactNative.Platform.OS}-${_reactNative.Platform.Version}`
    };
  },
  async _fetchWalletImage(imageId) {
    const imageUrl = `${api.baseUrl}/getWalletImage/${imageId}`;
    _AssetController.AssetController.setWalletImage(imageId, imageUrl);
  },
  async _fetchNetworkImage(imageId) {
    const imageUrl = `${api.baseUrl}/public/getAssetImage/${imageId}`;
    _reactNative.Image.getSizeWithHeaders(imageUrl, ApiController._getApiHeaders(), () => {});
    _AssetController.AssetController.setNetworkImage(imageId, imageUrl);
  },
  async fetchNetworkImages() {
    const {
      requestedCaipNetworks
    } = _NetworkController.NetworkController.state;
    const ids = requestedCaipNetworks?.map(_ref => {
      let {
        imageId
      } = _ref;
      return imageId;
    }).filter(Boolean);
    if (ids) {
      await Promise.allSettled(ids.map(id => ApiController._fetchNetworkImage(id)));
    }
  },
  async fetchInstalledWallets() {
    const path = _reactNative.Platform.select({
      default: 'getIosData',
      android: 'getAndroidData'
    });
    const {
      data: walletData
    } = await api.get({
      path,
      headers: ApiController._getApiHeaders()
    });
    const promises = walletData.map(async item => {
      return {
        id: item.id,
        isInstalled: await _CoreHelperUtil.CoreHelperUtil.checkInstalled(item)
      };
    });
    const results = await Promise.all(promises);
    const installed = results.filter(_ref2 => {
      let {
        isInstalled
      } = _ref2;
      return isInstalled;
    }).map(_ref3 => {
      let {
        id
      } = _ref3;
      return id;
    });
    const {
      excludeWalletIds
    } = _OptionsController.OptionsController.state;
    if (installed.length > 0) {
      const {
        data
      } = await api.get({
        path: '/getWallets',
        headers: ApiController._getApiHeaders(),
        params: {
          page: '1',
          platform: this.platform(),
          entries: installed?.length.toString(),
          include: installed?.join(','),
          exclude: excludeWalletIds?.join(',')
        }
      });
      const walletImages = data.map(d => d.image_id).filter(Boolean);
      await Promise.allSettled(walletImages.map(id => ApiController._fetchWalletImage(id)));
      state.installed = data;
    }
  },
  async fetchFeaturedWallets() {
    const {
      featuredWalletIds
    } = _OptionsController.OptionsController.state;
    const exclude = state.installed.map(_ref4 => {
      let {
        id
      } = _ref4;
      return id;
    });
    if (featuredWalletIds?.length) {
      const {
        data
      } = await api.get({
        path: '/getWallets',
        headers: ApiController._getApiHeaders(),
        params: {
          page: '1',
          platform: this.platform(),
          entries: featuredWalletIds?.length ? String(featuredWalletIds.length) : recommendedEntries,
          include: featuredWalletIds?.join(','),
          exclude: exclude?.join(',')
        }
      });
      data.sort((a, b) => featuredWalletIds.indexOf(a.id) - featuredWalletIds.indexOf(b.id));
      const images = data.map(d => d.image_id).filter(Boolean);
      await Promise.allSettled(images.map(id => ApiController._fetchWalletImage(id)));
      state.featured = data;
    }
  },
  async fetchRecommendedWallets() {
    const {
      installed
    } = ApiController.state;
    const {
      includeWalletIds,
      excludeWalletIds,
      featuredWalletIds
    } = _OptionsController.OptionsController.state;
    const exclude = [...installed.map(_ref5 => {
      let {
        id
      } = _ref5;
      return id;
    }), ...(excludeWalletIds ?? []), ...(featuredWalletIds ?? [])].filter(Boolean);
    const {
      data,
      count
    } = await api.get({
      path: '/getWallets',
      headers: ApiController._getApiHeaders(),
      params: {
        page: '1',
        platform: this.platform(),
        entries: recommendedEntries,
        include: includeWalletIds?.join(','),
        exclude: exclude?.join(',')
      }
    });
    const recent = await _StorageUtil.StorageUtil.getRecentWallets();
    const recommendedImages = data.map(d => d.image_id).filter(Boolean);
    const recentImages = recent.map(r => r.image_id).filter(Boolean);
    await Promise.allSettled([...recommendedImages, ...recentImages].map(id => ApiController._fetchWalletImage(id)));
    state.recommended = data;
    state.count = count ?? 0;
  },
  async fetchWallets(_ref6) {
    let {
      page
    } = _ref6;
    const {
      includeWalletIds,
      excludeWalletIds,
      featuredWalletIds
    } = _OptionsController.OptionsController.state;
    const exclude = [...state.installed.map(_ref7 => {
      let {
        id
      } = _ref7;
      return id;
    }), ...state.recommended.map(_ref8 => {
      let {
        id
      } = _ref8;
      return id;
    }), ...(excludeWalletIds ?? []), ...(featuredWalletIds ?? [])].filter(Boolean);
    const {
      data,
      count
    } = await api.get({
      path: '/getWallets',
      headers: ApiController._getApiHeaders(),
      params: {
        page: String(page),
        platform: this.platform(),
        entries: String(defaultEntries),
        include: includeWalletIds?.join(','),
        exclude: exclude.join(',')
      }
    });
    const images = data.map(w => w.image_id).filter(Boolean);
    await Promise.allSettled([...images.map(id => ApiController._fetchWalletImage(id)), _CoreHelperUtil.CoreHelperUtil.wait(300)]);
    state.wallets = [...state.wallets, ...data];
    state.count = count > state.count ? count : state.count;
    state.page = page;
  },
  async searchWallet(_ref9) {
    let {
      search
    } = _ref9;
    const {
      includeWalletIds,
      excludeWalletIds
    } = _OptionsController.OptionsController.state;
    state.search = [];
    const {
      data
    } = await api.get({
      path: '/getWallets',
      headers: ApiController._getApiHeaders(),
      params: {
        page: '1',
        platform: this.platform(),
        entries: String(defaultEntries),
        search,
        include: includeWalletIds?.join(','),
        exclude: excludeWalletIds?.join(',')
      }
    });
    const images = data.map(w => w.image_id).filter(Boolean);
    await Promise.allSettled([...images.map(id => ApiController._fetchWalletImage(id)), _CoreHelperUtil.CoreHelperUtil.wait(300)]);
    state.search = data;
  },
  async prefetch() {
    await ApiController.fetchInstalledWallets();
    state.prefetchPromise = Promise.race([Promise.allSettled([ApiController.fetchFeaturedWallets(), ApiController.fetchRecommendedWallets(), ApiController.fetchNetworkImages()]), _CoreHelperUtil.CoreHelperUtil.wait(3000)]);
  }
};
//# sourceMappingURL=ApiController.js.map