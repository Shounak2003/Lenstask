"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectView = ConnectView;
var _valtio = require("valtio");
var _reactNative = require("react-native");
var _coreReactNative = require("@web3modal/core-react-native");
var _uiReactNative = require("@web3modal/ui-react-native");
var _UiUtil = require("../../utils/UiUtil");
var _useCustomDimensions = require("../../hooks/useCustomDimensions");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConnectView() {
  const {
    recommended,
    featured,
    installed,
    count
  } = (0, _valtio.useSnapshot)(_coreReactNative.ApiController.state);
  const {
    recentWallets
  } = (0, _valtio.useSnapshot)(_coreReactNative.ConnectionController.state);
  const imageHeaders = _coreReactNative.ApiController._getApiHeaders();
  const {
    padding
  } = (0, _useCustomDimensions.useCustomDimensions)();
  const RECENT_COUNT = recentWallets?.length ? installed.length ? 1 : 2 : 0;
  const INSTALLED_COUNT = installed.length >= _UiUtil.UiUtil.TOTAL_VISIBLE_WALLETS ? _UiUtil.UiUtil.TOTAL_VISIBLE_WALLETS - RECENT_COUNT : installed.length;
  const FEATURED_COUNT = featured.length ? _UiUtil.UiUtil.TOTAL_VISIBLE_WALLETS - RECENT_COUNT - INSTALLED_COUNT : 0;
  const RECOMMENDED_COUNT = _UiUtil.UiUtil.TOTAL_VISIBLE_WALLETS - RECENT_COUNT - INSTALLED_COUNT - FEATURED_COUNT;
  const onWalletPress = wallet => {
    _coreReactNative.RouterController.push('ConnectingWalletConnect', {
      wallet
    });
  };
  const recentTemplate = () => {
    if (!recentWallets?.length) {
      return null;
    }
    return recentWallets.slice(0, RECENT_COUNT).map(wallet => /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
      key: wallet?.id,
      imageSrc: _coreReactNative.AssetUtil.getWalletImage(wallet),
      imageHeaders: imageHeaders,
      name: wallet?.name ?? 'Unknown',
      onPress: () => onWalletPress(wallet),
      tagLabel: "Recent",
      tagVariant: "shade",
      style: _styles.default.item
    }));
  };
  const installedTemplate = () => {
    if (!installed.length) {
      return null;
    }
    const list = filterOutRecentWallets([...installed]);
    return list.slice(0, INSTALLED_COUNT).map(wallet => /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
      key: wallet?.id,
      imageSrc: _coreReactNative.AssetUtil.getWalletImage(wallet),
      imageHeaders: imageHeaders,
      name: wallet?.name ?? 'Unknown',
      onPress: () => onWalletPress(wallet),
      style: _styles.default.item
    }));
  };
  const featuredTemplate = () => {
    if (!featured.length || FEATURED_COUNT < 1) {
      return null;
    }
    const list = filterOutRecentWallets([...featured]);
    return list.slice(0, FEATURED_COUNT).map(wallet => /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
      key: wallet?.id,
      imageSrc: _coreReactNative.AssetUtil.getWalletImage(wallet),
      imageHeaders: imageHeaders,
      name: wallet?.name ?? 'Unknown',
      onPress: () => onWalletPress(wallet),
      style: _styles.default.item
    }));
  };
  const recommendedTemplate = () => {
    if (!recommended.length || featured.length || RECOMMENDED_COUNT < 1) {
      return null;
    }
    const list = filterOutRecentWallets([...recommended]);
    return list.slice(0, RECOMMENDED_COUNT).map(wallet => /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
      key: wallet?.id,
      imageSrc: _coreReactNative.AssetUtil.getWalletImage(wallet),
      imageHeaders: imageHeaders,
      name: wallet?.name ?? 'Unknown',
      onPress: () => onWalletPress(wallet),
      style: _styles.default.item
    }));
  };
  const allWalletsTemplate = () => {
    const label = count > 10 ? `${Math.floor(count / 10) * 10}+` : count;
    return /*#__PURE__*/React.createElement(_uiReactNative.ListWallet, {
      name: "All wallets",
      showAllWallets: true,
      tagLabel: String(label),
      tagVariant: "shade",
      onPress: () => _coreReactNative.RouterController.push('AllWallets'),
      style: _styles.default.item
    });
  };
  const filterOutRecentWallets = wallets => {
    const recentIds = recentWallets?.slice(0, RECENT_COUNT).map(wallet => wallet.id);
    if (!recentIds?.length) return wallets;
    const filtered = wallets.filter(wallet => !recentIds.includes(wallet.id));
    return filtered;
  };
  return /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
    style: {
      paddingHorizontal: padding
    },
    bounces: false
  }, /*#__PURE__*/React.createElement(_uiReactNative.FlexView, {
    padding: ['xs', 's', '2xl', 's']
  }, recentTemplate(), installedTemplate(), featuredTemplate(), recommendedTemplate(), allWalletsTemplate()));
}
//# sourceMappingURL=index.js.map